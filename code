# -*- coding: utf-8 -*-
"""VictorOliveiraSantos_Desafio_Cashin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KLiemy6SNIVJKIjUWryP9LS_r8ABVw06

### importando libs importantes
"""

import sqlite3
import pandas as pd

"""### Criando tabelas para poder realizar as querys

#### Clientes
"""

# Criar conexão em memória
conn = sqlite3.connect(":memory:")

# Criar tabela clientes
conn.execute("""
CREATE TABLE clientes (
    cliente_id INTEGER PRIMARY KEY,
    nome TEXT,
    cidade TEXT
);
""")

# Inserir dados
conn.executemany("""
INSERT INTO clientes (cliente_id, nome, cidade)
VALUES (?, ?, ?);
""", [
    (1, 'João Silva', 'São Paulo'),
    (2, 'Maria Lima', 'Rio de Janeiro'),
    (3, 'Pedro Souza', 'São Paulo'),
    (4, 'Ana Costa', 'Belo Horizonte')
])

# Consultar com pandas
df = pd.read_sql_query("SELECT * FROM clientes", conn)
df

"""#### Pedidos"""

# Criar tabela pedidos
conn.execute("""
CREATE TABLE pedidos (
    pedido_id INTEGER PRIMARY KEY,
    cliente_id INTEGER,
    valor REAL,
    data_pedido DATE,
    FOREIGN KEY (cliente_id) REFERENCES clientes(cliente_id)
);
""")

# Inserir dados na tabela pedidos
pedidos = [
    (101, 1, 200, '2023-10-01'),
    (102, 1, 150, '2023-11-15'),
    (103, 2, 300, '2023-10-20'),
    (104, 3, 120, '2023-12-01')
]

conn.executemany("INSERT INTO pedidos (pedido_id, cliente_id, valor, data_pedido) VALUES (?, ?, ?, ?);", pedidos)

# Consultar com pandas
df = pd.read_sql_query("SELECT * FROM pedidos", conn)
df

"""#### Exercicio 1:
Liste o numero de clientes e os valores de seus pedidos. Mostre apenas os clientes que jã realizaram ao menos um pedido.
"""

df_e1 =pd.read_sql_query(
    """
    SELECT c.nome, sum(p.valor) as valor_pedidos
    FROM pedidos p
    LEFT JOIN clientes c on c.cliente_id = p.cliente_id
    WHERE p.cliente_id IS NOT NULL
    GROUP BY c.nome
    """
    , conn)
df_e1

"""#### Exercicio 2:
Liste todos os clientes e, se tiverem, o valor do último pedido realizado. Caso não tenham
realizado pedidos, o campo de valor deve aparecer como NULL.
"""

df_e2 =pd.read_sql_query(
    """
    SELECT
      c.cliente_id,
      c.nome,
      p.valor AS valor_ultimo_pedido
    FROM clientes c
    LEFT JOIN (
        SELECT pedido_id, cliente_id, valor, data_pedido
        FROM pedidos p1
        WHERE data_pedido = (
            SELECT MAX(data_pedido) as data_ultimo_pedido
            FROM pedidos p2
            WHERE p2.cliente_id = p1.cliente_id
        )
    ) p ON c.cliente_id = p.cliente_id
    ORDER BY c.cliente_id
    """
    , conn)
df_e2

"""#### Exercicio 3:
Para cada cliente, apresente o total gasto em pedidos, a quantidade de pedidos realizados e
a média de valor por pedido
"""

df_e3 =pd.read_sql_query(
    """
    SELECT
      c.cliente_id,
      c.nome,
      COALESCE(SUM(p.valor), 0) AS total_gasto,
      COUNT(p.pedido_id) AS quantidade_pedidos,
      CASE
        WHEN COUNT(p.pedido_id) > 0 THEN ROUND(AVG(p.valor), 2)
        ELSE 0
      END AS media_valor_pedido
    FROM clientes c
    LEFT JOIN pedidos p ON c.cliente_id = p.cliente_id
    GROUP BY c.cliente_id, c.nome
    ORDER BY c.cliente_id DESC
    """
    , conn)
df_e3

"""#### Exercicio 4:
Liste todas as cidades e o total de pedidos realizados por clientes de cada cidade,
considerando apenas os clientes que efetivamente fizeram algum pedido.

"""

df_e4 =pd.read_sql_query(
    """
    SELECT
      c.cidade,
      COALESCE(COUNT(DISTINCT p.pedido_id),0) AS quantidade_pedidos
    FROM clientes c
    LEFT JOIN pedidos p ON c.cliente_id = p.cliente_id
    GROUP BY  c.cidade
    ORDER BY quantidade_pedidos DESC
    """
    , conn)
df_e4

"""#### Exercicio 5:
Liste o nome dos clientes que realizaram mais de um pedido e apresente também a
quantidade de pedidos realizados e o valor total gasto.
"""

df_e5 =pd.read_sql_query(
    """
    SELECT
      c.nome,
      COUNT(p.pedido_id) AS quantidade_pedidos,
      SUM(p.valor) AS total_gasto
    FROM clientes c
    JOIN pedidos p ON c.cliente_id = p.cliente_id
    GROUP BY c.nome
    HAVING COUNT(p.pedido_id) > 1
    ORDER BY quantidade_pedidos DESC
    """
    , conn)
df_e5

"""#### Exercicio 6:
Liste o nome dos clientes e o valor do pedido mais caro que cada um realizou.
"""

df_e6 =pd.read_sql_query(
    """
    SELECT
      c.nome,
      MAX(p.valor) AS pedido_mais_caro
    FROM clientes c
    LEFT JOIN pedidos p ON c.cliente_id = p.cliente_id
    GROUP BY c.nome
    ORDER BY pedido_mais_caro DESC
    """
    , conn)
df_e6
